CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
SET(CMAKE_CXX_STANDARD 20)

PROJECT(Terralistic-server CXX)
PROJECT(Terralistic CXX)


SET(CMAKE_OBJCXX_COMPILER ${CMAKE_CXX_COMPILER})

EXECUTE_PROCESS(COMMAND py -m build_project nobuild WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

ADD_CUSTOM_COMMAND(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/Build/Resources/" COMMAND "py -m build_project nobuild")

IF(UNIX)
    SET(CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -lpthread")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
ENDIF()

IF(CMAKE_BUILD_TYPE STREQUAL Debug)
    ADD_COMPILE_DEFINITIONS(DEVELOPER_MODE NDEBUG)
    IF(WIN32)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Od")
    ELSE()
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0")
    ENDIF()
else()
    IF(WIN32)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2")
    ELSE()
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Ofast")
    ENDIF()
ENDIF()

SET(LAUNCHER_FILE ${CMAKE_CURRENT_SOURCE_DIR}/Server/launcher/launcher.cpp)

FILE(GLOB_RECURSE SRC_LIBRARIES CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/Shared/*.cpp)
FILE(GLOB_RECURSE SRC_LIBRARY_TESTS CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/*.mm)
FILE(GLOB_RECURSE SRC_CLIENT CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Client/*.cpp)
FILE(GLOB_RECURSE SRC_SERVER CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Server/*.cpp)
LIST(REMOVE_ITEM SRC_SERVER ${LAUNCHER_FILE})

# GLAD variables
SET(GLAD_DIR ${CMAKE_SOURCE_DIR}/Dependencies/glad/)
SET(GLAD_INCLUDE_DIR ${GLAD_DIR}/include/)
SET(GLAD_SOURCES ${GLAD_DIR}/src/glad.c)
SET_SOURCE_FILES_PROPERTIES(${GLAD_SOURCES} PROPERTIES LANGUAGE CXX)

# PlatformFolders variables
SET(PF_DIR ${CMAKE_SOURCE_DIR}/Dependencies/PlatformFolders-4.2.0/)
SET(PF_INCLUDE_DIR ${PF_DIR}/sago/)
SET(PF_SOURCES ${PF_DIR}/sago/platform_folders.cpp)

# PerlinNoise variables
SET(PN_DIR ${CMAKE_SOURCE_DIR}/Dependencies/PerlinNoise-3.0.0/)
SET(PN_INCLUDE_DIR ${PN_DIR})

ADD_EXECUTABLE(Terralistic ${SRC_LIBRARIES} ${SRC_LIBRARY_TESTS} ${SRC_CLIENT} ${SRC_SERVER} ${PF_SOURCES} ${GLAD_SOURCES})
ADD_EXECUTABLE(Terralistic-server ${SRC_LIBRARIES} ${SRC_SERVER} ${PF_SOURCES} ${GLAD_SOURCES} ${LAUNCHER_FILE})

# Search for headers and add include dir there
FILE(GLOB_RECURSE HEADER_LIST Client/*.hpp Libraries/*.hpp Server/*.hpp Shared/*.hpp)
SET(INCLUDES "")
FOREACH(FILE_PATH ${HEADER_LIST})
    GET_FILENAME_COMPONENT(DIR_PATH ${FILE_PATH} PATH)
    SET(INCLUDES ${INCLUDES} ${DIR_PATH})
ENDFOREACH()
LIST(REMOVE_DUPLICATES INCLUDES)

INCLUDE_DIRECTORIES(Terralistic ${INCLUDES})
INCLUDE_DIRECTORIES(Terralistic-server ${INCLUDES})

INCLUDE_DIRECTORIES(Terralistic SYSTEM ${GLAD_INCLUDE_DIR} ${PF_INCLUDE_DIR} ${PN_INCLUDE_DIR})
INCLUDE_DIRECTORIES(Terralistic-server SYSTEM ${GLAD_INCLUDE_DIR} ${PF_INCLUDE_DIR} ${PN_INCLUDE_DIR})

IF(WIN32)
    SET(ZLIB_DIR ${CMAKE_SOURCE_DIR}/Dependencies/zlib-master/)
    SET(ZLIB_LIB zlib)
    SET(ZLIB_LIB_DIR ${ZLIB_DIR}lib/)
    SET(ZLIB_DLL ${ZLIB_DIR}bin/zlib.dll)
    SET(ZLIB_INCLUDE_DIR ${ZLIB_DIR}include/)

    SET(GLFW_DIR ${CMAKE_SOURCE_DIR}/Dependencies/glfw-3.3.7.bin.WIN32/)
    SET(GLFW_DLL ${GLFW_DIR}lib-vc2022/glfw3.dll)
    SET(GLFW_LIB glfw3 opengl32)
    SET(GLFW_LIB_DIR ${GLFW_DIR}lib-vc2022/)
    SET(GLFW_INCLUDE_DIR ${GLFW_DIR}include/)

    TARGET_LINK_DIRECTORIES(Terralistic PUBLIC ${ZLIB_LIB_DIR} ${GLFW_LIB_DIR})
    TARGET_LINK_LIBRARIES(Terralistic Ws2_32.lib ${ZLIB_LIB} ${GLFW_LIB})

    TARGET_LINK_DIRECTORIES(Terralistic-server PUBLIC ${ZLIB_LIB_DIR} ${GLFW_LIB_DIR})
    TARGET_LINK_LIBRARIES(Terralistic-server Ws2_32.lib ${ZLIB_LIB} ${GLFW_LIB})

    INCLUDE_DIRECTORIES(Terralistic SYSTEM ${ZLIB_INCLUDE_DIR} ${GLFW_INCLUDE_DIR})

    FILE(COPY ${ZLIB_DLL} ${GLFW_DLL} DESTINATION .)
ELSE()
    SET(ZLIB_DIR ${CMAKE_SOURCE_DIR}/Dependencies/zlib-master/)
    SET(ZLIB_LIB z)
    SET(ZLIB_LIB_DIR ${ZLIB_DIR}lib/)
    SET(ZLIB_INCLUDE_DIR ${ZLIB_DIR}include/)

    SET(GLFW_DIR ${CMAKE_SOURCE_DIR}/Dependencies/glfw-3.3.7/)
    SET(GLFW_LIB glfw3)
    SET(GLFW_LIB_DIR ${GLFW_DIR}build/src/)
    SET(GLFW_INCLUDE_DIR ${GLFW_DIR}include/)

    TARGET_LINK_DIRECTORIES(Terralistic PUBLIC ${ZLIB_LIB_DIR} ${GLFW_LIB_DIR})
    TARGET_LINK_LIBRARIES(Terralistic ${ZLIB_LIB} ${GLFW_LIB} dl X11)

    TARGET_LINK_DIRECTORIES(Terralistic-server PUBLIC ${ZLIB_LIB_DIR} ${GLFW_LIB_DIR})
    TARGET_LINK_LIBRARIES(Terralistic-server ${ZLIB_LIB} ${GLFW_LIB} dl X11)

    INCLUDE_DIRECTORIES(Terralistic SYSTEM ${ZLIB_INCLUDE_DIR} ${GLFW_INCLUDE_DIR})
ENDIF()

FILE(COPY Build/Resources DESTINATION .)
